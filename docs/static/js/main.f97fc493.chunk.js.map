{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GiftGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","handleInputChange","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","map","img","id","images","downsized_medium","gifs","GiftGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifts","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uLAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,sBAAMC,SATY,SAACC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAc,SAAAS,GAAI,4BAAOA,GAAP,CAAYP,OAC9BC,EAAc,MAKlB,SACI,uBACAO,KAAK,OACLC,MAAQT,EACRU,SAAa,SAACP,GAAD,OAhBI,SAACA,GACtBF,EAAcE,EAAEQ,OAAOF,OAeCG,CAAkBT,S,QCnBrCU,EAAc,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAE/B,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAMC,IAAKF,EAAKG,IAAMJ,IACtB,kCAAMA,S,uBCLDK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAEAG,MAAOR,GAFP,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAHY,UAKAA,EAAKC,KAAI,SAAAC,GAAO,IAAD,EAC9B,MAAO,CACCC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIE,cAAN,aAAE,EAAYC,iBAAiBhB,QAT3B,eAKbiB,EALa,yBAYdA,GAZc,4CAAH,sDCIXC,EAAW,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAEhBM,ECLmB,SAACN,GAC5B,MAA0BrB,mBAAS,CAC/B2B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OAVAC,qBAAU,WACNlB,EAAQC,GACLkB,MAAK,SAAAC,GACJH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGjB,CAACd,IAEIe,EDVSK,CAAcpB,GAAtBM,KAEN,OACI,qCACA,6BAAMN,IAEN,qBAAKJ,UAAU,YAAf,SAEQU,EAAKC,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAESA,GADEA,EAAIC,aEdlBY,EAAe,WAExB,MAAoC1C,mBAAS,CAAC,QAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACI,qCACD,iDACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEC4C,EAAWf,KAAI,SAAAP,GAAQ,OACnB,cAAC,EAAD,CAEEA,SAAaA,GADLA,YCZtBuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f97fc493.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n    const handleInputChange =(e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmint = (e) =>{\r\n        e.preventDefault();\r\n        if (inputValue.trim().length >2) {\r\n            setCategories(cats =>[...cats,inputValue] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit= {handleSubmint}>\r\n            <input \r\n            type=\"text\"\r\n            value={ inputValue }\r\n            onChange = { (e) => handleInputChange(e) }\r\n             />\r\n        </form>\r\n    )\r\n    \r\n}\r\n   AddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n   }\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img  src={url} alt={ title } />\r\n            <p> { title }</p>\r\n        </div>\r\n    )\r\n}\r\n","\r\n   \r\n    export const getGifs = async( category) =>{\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=3veJQRKEMVN0O6S2tM9ObW6VpMlJpdHP`;\r\n        const resp = await fetch( url );\r\n        const {data} = await resp.json();\r\n        \r\n        const gifs = await data.map(img =>{\r\n            return { \r\n                    id: img.id,\r\n                    title: img.title, \r\n                    url: img.images?.downsized_medium.url\r\n                    }\r\n        })\r\n      return gifs;\r\n    }   \r\n","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifts } from '../hooks/useFetchGifts';\r\n\r\n\r\n\r\nexport const GiftGrid = ({category}) => {\r\n\r\n   const {data} = useFetchGifts(category);\r\n    \r\n    return (\r\n        <>\r\n        <h2>{ category }</h2>\r\n      \r\n        <div className=\"card-grid\">\r\n            {    \r\n                data.map( img  => (\r\n                <GifGridItem \r\n                    key = {img.id}\r\n                    { ...img }/>\r\n                ))\r\n               \r\n            }\r\n         </div >\r\n         </>\r\n    )\r\n}\r\n","import { useState,useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifts = (category) => {\r\n  const [state, setstate] = useState({\r\n      data: [],\r\n      loading: true\r\n      });\r\n  useEffect(()=>{\r\n      getGifs(category)\r\n        .then(imgs =>{\r\n          setstate({\r\n            data: imgs,\r\n            loading: false  \r\n          });\r\n      })\r\n  },[category]);\r\n  \r\n  return state;\r\n  \r\n}\r\n","import React ,{useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GiftGrid } from './components/GiftGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n    \r\n    const [categories, setCategories] = useState(['one']);\r\n\r\n    return (\r\n        <>\r\n       <h2>Gift Expert App</h2>\r\n       <AddCategory setCategories = {setCategories} />\r\n       <hr/>\r\n      \r\n       <ol>\r\n       {\r\n        categories.map(category => (\r\n            <GiftGrid  \r\n              key = { category }  \r\n              category = { category } \r\n              />         \r\n        ))\r\n        }\r\n       </ol>\r\n       \r\n       </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(  \n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}